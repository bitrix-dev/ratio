1. Теория. Одна задача на выбор:

а) Дано: интернет магазин на "1с-битрикс: Бизнес", каталог, корзина и оформление заказа реализованы нативными компонентами (catalog, sale.basket.basker, sale.order.full). 
Задача:  реализовать акцию "Каждый N товар за X рублей". У акции должны быть настройки, где выставляется период активности акции, параметры N и X

Пример: при N=2 и X=1 каждый второй товар будет стоить 1 рубль. Выбираются товары с наименьшей ценой. Нужно считать каждый экземпляр товара. То есть если в корзине одного товара 5 штук, второго товара 3 штуки, то 4 товара надо продать за 1 рубль.

Еще один пример. В корзине:
товар 1, цена 500 рублей, 3 штуки
товар 2, цена 100 рублей, 2 штуки
товар 3, цена 200 рублей, 4 штуки
Акция: каждый 3-й товар за 1 рубль. У нас 9 предметов, значит 3 из них надо продать по рублю. Берем 3 самых дешевых предмета. Итого мы продаем товар 1 по своей цене, товар 2 продаем по рублю, у товара 3 продаем один предмет по рублю, три предмента по своей цене. Получилось 3 самых дешевых предмета по рублю, остальные по своей цене.

Решение
Насколько я знаю, нет единой точки, где для всех компонентов (корзины и заказа можно пересчитать стоимости товаров). Класс провайдера продукта PRODUCT_PROVIDER_CLASS также не подойдет, поскольку нам нужно знать общее количество товаров в корзине, к тому же отсортированное по цене. Для корзины нужно делать пересчет в result_modifier.php для отображения пользователю. 
Для этого создаем инфоблок «Акции» и добавляем 2 свойства: N_PRODUCT N-ый товар и N_PRODUCT_PRICE X-цена за этот товар.

sale.basket.basket
В result_modifier.php компонента sale.basket.basket сортируем все товары по цене по возрастанию. Получаем текущую активную акцию из инфоблока.
Создаем переменную для счетчика $i. 
Далее создаем цикл по всем товарам, внутри цикл по количеству товаров. 
Если $i делится без остатка на N_PRODUCT, то переписываем цену продукту с учетом N_PRODUCT_PRICE, то есть, если в корзине 1 товар и его 4 штуки, то если это 3-ий товар ($i % 3 == 0), мы цену меняем на N_PRODUCT_PRICE. Далее простое суммирование полученных цен.
Затем подписываемся в файле init.php на событие OnOrderAdd. 
При создании заказа, сработает событие. В событии мы также пройдемся по всем товарам и повторим весь функционал как в sale.basket.basket (указанный выше). Обновим значения цен для каждой позиции товара. Обновим общую сумму заказа.
В итоге получим заказ, где стоимость каждой позиции учитывает нашу акцию.

2. Практика. Одна задача на выбор:

б) Компонент news.list выводит элементы из инфоблока "Статьи". У элементов инфоблока есть множественное свойство типа "Привязка к пользователю" под названием "Пользователи, которым понравилась статья". Необходимо доработать стандартный шаблон компонента следующим образом: выводить логины пользователей, которым понравилась статья. Если пользователь авторизован, и он поставил "лайк" статье, то выводить ссылку "Уже не нравится", если он не ставил "лайк", то  выводить ссылку "Мне нравится статья". У компонента должно работать управляемое кэширование, не зависящее от ID пользователя. На выходе – папка с доработанным шаблоном и аякс-обработчик "лайка".

Решение
Файлы шаблона компонента news.list в репозитории.

3. Практика. Фронтенд

Сверстай контрол оценки и показа рейтинга. Практически все наши контролы должны быть очень гибкими к окружающему пространству, должны уметь располагаться на любом фоне и при желании легко менять свой "скин". Обрати внимание, что контрол должен не только выставлять оценку, но и показывать текущую. 

Плюсом будет верстка по БЭМу.

Макет – https://studioratio.box.com/s/8yiw3ggc86w8xp888ketkk8l62hmi36y

Решение
Файлы html рейтинга в репозитории.
